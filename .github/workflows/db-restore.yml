name: Database In-Place PITR
on:
  workflow_call:
    inputs:
      restore_timestamp:
        required: true
        type: string
      environment:
        required: true
        type: string
      cluster_name:
        required: true
        type: string

jobs:
  restore:
    runs-on: ubuntu-latest
    environment:
      name: ${{ inputs.environment }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set environment variables
        run: |
          echo "NAMESPACE=f3c07a-${{ inputs.environment }}" >> $GITHUB_ENV
          echo "RESTORE_TIMESTAMP=${{ inputs.restore_timestamp }}" >> $GITHUB_ENV
          echo "CLUSTER_NAME=${{ inputs.cluster_name }}" >> $GITHUB_ENV

      - name: Debug - Show Environment Variables
        run: |
          echo "Current environment variables:"
          echo "NAMESPACE: ${{ env.NAMESPACE }}"
          echo "RESTORE_TIMESTAMP: ${{ env.RESTORE_TIMESTAMP }}"
          echo "CLUSTER_NAME: ${{ env.CLUSTER_NAME }}"

      - name: Login to OpenShift
        run: |
          oc login ${{ secrets.OPENSHIFT_SERVER }} \
            --token=${{ secrets.OPENSHIFT_API_TOKEN }} \
            --insecure-skip-tls-verify=true
          oc project ${{ env.NAMESPACE }}

      - name: Debug - Show Current Cluster Configuration
        run: |
          echo "Current base postgrescluster.yml content:"
          cat deployments/openshift/kustomize/base/crunchy/postgrescluster.yml
          echo "\nCurrent patch.yml content (if exists):"
          cat deployments/openshift/kustomize/overlays/crunchy/${{ inputs.environment }}/patch.yml || echo "patch.yml doesn't exist yet"
          echo "\nCurrent kustomization.yml content:"
          cat deployments/openshift/kustomize/overlays/crunchy/${{ inputs.environment }}/kustomization.yml

      - name: Update cluster names and patch
        run: |
          # Update only metadata.name in base postgrescluster.yml
          sed -i '0,/name:/{s/name: .*/name: '"${{ env.CLUSTER_NAME }}"'/}' \
            deployments/openshift/kustomize/base/crunchy/postgrescluster.yml
          
          # Use yq to append only the restore section
          yq eval -i '.spec.backups.pgbackrest.restore = {
            "enabled": true,
            "repoName": "repo1",
            "options": [
              "--type=time",
              "--target=\"${{ env.RESTORE_TIMESTAMP }}\"",
              "--target-timeline=current"
            ]
          }' deployments/openshift/kustomize/overlays/crunchy/${{ inputs.environment }}/patch.yml

      - name: Debug - Show Updated Configuration
        run: |
          echo "Updated base postgrescluster.yml content:"
          cat deployments/openshift/kustomize/base/crunchy/postgrescluster.yml
          echo "\nUpdated patch.yml content:"
          cat deployments/openshift/kustomize/overlays/crunchy/${{ inputs.environment }}/patch.yml
          echo "\nDebug kustomize build output:"
          oc kustomize deployments/openshift/kustomize/overlays/crunchy/${{ inputs.environment }}

      - name: Apply restore configuration
        run: |
          oc apply -k deployments/openshift/kustomize/overlays/crunchy/${{ inputs.environment }} \
            -n ${{ env.NAMESPACE }}

      - name: Trigger restore with annotation
        run: |
          oc annotate postgrescluster ${{ env.CLUSTER_NAME }} \
            --overwrite \
            postgres-operator.crunchydata.com/pgbackrest-restore="restore-$(date +%Y%m%d-%H%M%S)" \
            -n ${{ env.NAMESPACE }}

      - name: Wait for restore completion
        run: |
          oc wait --for=condition=PostgresDataInitialized=true \
            postgrescluster/${{ env.CLUSTER_NAME }} \
            -n ${{ env.NAMESPACE }} --timeout=30m

  cleanup:
    needs: restore
    if: always()
    environment:
      name: ${{ inputs.environment }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set environment variables
        run: |
          echo "NAMESPACE=f3c07a-${{ inputs.environment }}" >> $GITHUB_ENV
          echo "CLUSTER_NAME=${{ inputs.cluster_name }}" >> $GITHUB_ENV

      - name: Login to OpenShift
        run: |
          oc login ${{ secrets.OPENSHIFT_SERVER }} \
            --token=${{ secrets.OPENSHIFT_API_TOKEN }} \
            --insecure-skip-tls-verify=true
          oc project ${{ env.NAMESPACE }}

      - name: Remove restore annotation
        continue-on-error: true
        run: |
          oc annotate postgrescluster ${{ env.CLUSTER_NAME }} \
            postgres-operator.crunchydata.com/pgbackrest-restore- \
            -n ${{ env.NAMESPACE }}
            
      - name: Remove restore configuration
        continue-on-error: true
        run: |
          PATCH_FILE="deployments/openshift/kustomize/overlays/crunchy/${{ inputs.environment }}/patch.yml"
          
          if [ -f "$PATCH_FILE" ]; then
            echo "Current patch file content:"
            cat "$PATCH_FILE"
            
            echo -e "\nRemoving restore configuration..."
            yq -i 'del(.spec.backups.pgbackrest.restore)' "$PATCH_FILE"
            
            echo -e "\nUpdated patch file content:"
            cat "$PATCH_FILE"
            
            echo -e "\nPreview of kustomize output:"
            oc kustomize deployments/openshift/kustomize/overlays/crunchy/${{ inputs.environment }}
            
            echo -e "\nApplying configuration..."
            oc apply -k deployments/openshift/kustomize/overlays/crunchy/${{ inputs.environment }} \
              -n ${{ env.NAMESPACE }}
          else
            echo "Patch file $PATCH_FILE does not exist"
            exit 1
          fi