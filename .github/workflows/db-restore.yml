name: Database In-Place PITR
on:
  push:
    branches: ['stage', 'development']
  workflow_dispatch:
    inputs:
      cluster_name:
        description: 'PostgreSQL Cluster Name'
        required: true
        default: 'api-postgres-clone'
        type: string
      environment:
        description: 'Environment to backup'
        required: true
        default: 'development'
        type: choice
        options:
          - development
          - stage
          - main

  # workflow_call:
  #   inputs:
  #     # restore_timestamp:
  #     #   required: true
  #     #   type: string
  #     environment:
  #       required: true
  #       type: string
  #     cluster_name:
  #       required: true
  #       type: string
  #     backup_id:
  #       required: true
  #       type: string

env:
  DEFAULT_BACKUP_ANNOTATION: '20241125-163544'

jobs:
  restore:
    runs-on: ubuntu-latest
    environment:
      name: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.environment || (github.ref_name == 'main' && 'prod' || github.ref_name == 'stage' && 'test' || 'dev') }}
    env:
      ENVIRONMENT: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.environment || (github.ref_name == 'main' && 'prod' || github.ref_name == 'stage' && 'test' || 'dev') }}
      BACKUP_ANNOTATION: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.backup_id || env.DEFAULT_BACKUP_ANNOTATION }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set environment variables
        run: |
          echo "NAMESPACE=f3c07a-${{ env.ENVIRONMENT }}" >> $GITHUB_ENV
          # echo "RESTORE_TIMESTAMP=${{ inputs.restore_timestamp }}" >> $GITHUB_ENV
          echo "CLUSTER_NAME=${{ inputs.cluster_name }}" >> $GITHUB_ENV

      - name: Set Cluster Name
        id: set-cluster
        run: |
          CLUSTER_NAME=${{ github.event.inputs.cluster_name || 'api-postgres-clone' }}
          echo "cluster_name=$CLUSTER_NAME" >> $GITHUB_OUTPUT

      - name: Debug - Show Environment Variables
        run: |
          echo "Current environment variables:"
          echo "NAMESPACE: ${{ env.NAMESPACE }}"
          # echo "RESTORE_TIMESTAMP: ${{ env.RESTORE_TIMESTAMP }}"
          echo "CLUSTER_NAME: ${{ env.CLUSTER_NAME }}"

      - name: Login to OpenShift
        run: |
          oc login ${{ secrets.OPENSHIFT_SERVER }} \
            --token=${{ secrets.OPENSHIFT_API_TOKEN }} \
            --insecure-skip-tls-verify=true
          oc project ${{ env.NAMESPACE }}

      - name: Debug - Show Current Cluster Configuration
        run: |
          echo "Current base postgrescluster.yml content:"
          cat deployments/openshift/kustomize/base/crunchy/postgrescluster.yml
          echo "\nCurrent patch.yml content (if exists):"
          cat deployments/openshift/kustomize/overlays/crunchy/${{ env.ENVIRONMENT }}/patch.yml || echo "patch.yml doesn't exist yet"
          echo "\nCurrent kustomization.yml content:"
          cat deployments/openshift/kustomize/overlays/crunchy/${{ env.ENVIRONMENT }}/kustomization.yml

      - name: Get Backup ID
        run: |
          # Get the pod name
          POSTGRES_POD=$(oc get pods -l postgres-operator.crunchydata.com/role=master -o jsonpath='{.items[0].metadata.name}')

          # Run pgbackrest info and filter for the backup with matching annotation
          BACKUP_ID=$(oc exec $POSTGRES_POD -- pgbackrest info \
            --output=json \
            | jq -r '.[] | select(.backup[] != null) | .backup[] 
            | select(.annotation.source == "${{ env.BACKUP_ANNOTATION }}") 
            | .label' \
            | tail -n1)

          # Set the backup ID as an output
          echo "BACKUP_ID=$BACKUP_ID" >> $GITHUB_ENV

      - name: Update cluster names and patch
        run: |
          # Update only metadata.name in base postgrescluster.yml
          sed -i '0,/name:/{s/name: .*/name: '"${{ env.CLUSTER_NAME }}"'/}' \
            deployments/openshift/kustomize/base/crunchy/postgrescluster.yml

          # Use yq to append only the restore section
          yq eval -i '.spec.backups.pgbackrest.restore = {
            "enabled": true,
            "repoName": "repo1",
            "options": [
              "--set=${{ env.BACKUP_ID }}",
              "--type=immediate"
            ]
          }' deployments/openshift/kustomize/overlays/crunchy/${{ env.ENVIRONMENT }}/patch.yml

      - name: Debug - Show Updated Configuration
        run: |
          echo "Updated base postgrescluster.yml content:"
          cat deployments/openshift/kustomize/base/crunchy/postgrescluster.yml
          echo "\nUpdated patch.yml content:"
          cat deployments/openshift/kustomize/overlays/crunchy/${{ env.ENVIRONMENT }}/patch.yml
          echo "\nDebug kustomize build output:"
          oc kustomize deployments/openshift/kustomize/overlays/crunchy/${{ env.ENVIRONMENT }}

      - name: Apply restore configuration
        run: |
          oc apply -k deployments/openshift/kustomize/overlays/crunchy/${{ env.ENVIRONMENT }} \
            -n ${{ env.NAMESPACE }}

      - name: Set Restore ID
        id: set-restore-id
        run: |
          RESTORE_ID="restore-$(date '+%Y%m%d-%H%M%S')"
          echo "id=$RESTORE_ID" >> $GITHUB_OUTPUT

      - name: Trigger restore with annotation
        run: |
          oc annotate postgrescluster ${{ env.CLUSTER_NAME }} \
            --overwrite \
            postgres-operator.crunchydata.com/pgbackrest-restore="${{ steps.set-restore-id.outputs.id }}" \
            -n ${{ env.NAMESPACE }}

      - name: Wait for specific restore completion
        run: |
          timeout=600 # 10 minutes timeout
          while [ $timeout -gt 0 ]; do
            status=$(oc get postgrescluster ${{ env.CLUSTER_NAME }} \
              -n ${{ env.NAMESPACE }} \
              -o jsonpath='{.status.pgbackrest.restore}')
            
            if [ -n "$status" ]; then
              echo "Current restore status: $status"
              
              # Parse JSON and check ID
              restore_id=$(echo "$status" | jq -r '.id')
              finished=$(echo "$status" | jq -r '.finished')
              
              if [ "$restore_id" = "${{ steps.set-restore-id.outputs.id }}" ]; then
                if [ "$finished" = "true" ]; then
                  echo "Restore completed successfully"
                  exit 0
                fi
              fi
            fi
            
            echo "Restore in progress..."
            sleep 10
            timeout=$((timeout-10))
          done

          echo "Restore timed out"
          exit 1

  cleanup:
    needs: restore
    if: always()
    environment:
      name: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.environment || (github.ref_name == 'main' && 'prod' || github.ref_name == 'stage' && 'test' || 'dev') }}
    env:
      ENVIRONMENT: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.environment || (github.ref_name == 'main' && 'prod' || github.ref_name == 'stage' && 'test' || 'dev') }}
      BACKUP_ANNOTATION: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.backup_id || env.DEFAULT_BACKUP_ANNOTATION }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set environment variables
        run: |
          echo "NAMESPACE=f3c07a-${{ env.ENVIRONMENT }}" >> $GITHUB_ENV
          echo "CLUSTER_NAME=${{ inputs.cluster_name }}" >> $GITHUB_ENV

      - name: Login to OpenShift
        run: |
          oc login ${{ secrets.OPENSHIFT_SERVER }} \
            --token=${{ secrets.OPENSHIFT_API_TOKEN }} \
            --insecure-skip-tls-verify=true
          oc project ${{ env.NAMESPACE }}

      - name: Remove restore annotation
        continue-on-error: true
        run: |
          oc annotate postgrescluster ${{ env.CLUSTER_NAME }} \
            postgres-operator.crunchydata.com/pgbackrest-restore- \
            -n ${{ env.NAMESPACE }}

      - name: Remove restore configuration
        continue-on-error: true
        run: |
          # Update only metadata.name in base postgrescluster.yml
          sed -i '0,/name:/{s/name: .*/name: '"${{ env.CLUSTER_NAME }}"'/}' \
            deployments/openshift/kustomize/base/crunchy/postgrescluster.yml

      - name: Apply configuration
        run: |
          oc apply -k deployments/openshift/kustomize/overlays/crunchy/${{ env.ENVIRONMENT }} \
            -n ${{ env.NAMESPACE }}
