name: Migrate DB Schema
on:
  workflow_dispatch:
    inputs:
      sha:
        description: 'Git SHA'
        required: true
        type: string
      changed_apps:
        description: 'Changed apps'
        required: true
        type: string

jobs:
  metadata:
    name: Get Metadata
    runs-on: ubuntu-20.04

    outputs:
      needs-migration: ${{ steps.get-migrations.outputs.changes }}
    steps:
      - name: Debug Info
        run: |
          echo "Ref: ${{ github.ref }}"
          echo "Ref Name: ${{ github.ref_name }}"
          echo "SHA: ${{ inputs.sha }}"
          echo "Full Ref: ${{ github.ref }}"
      - name: Checkout
        uses: actions/checkout@v3
        with:
          ref: ${{ github.ref }}
      - name: Get Migrations
        id: get-migrations
        uses: dorny/paths-filter@v2
        with:
          base: ${{ github.ref }}
          ref: ${{ github.ref }}
          filters: |
            migration:
              - 'apps/api/prisma/migrations/**'
  migrate:
    name: Migrate DB Schema
    needs: metadata
    if: ${{ contains(needs.metadata.outputs.needs-migration, 'migration') }}
    runs-on: ubuntu-20.04
    environment:
      name: ${{ github.ref_name == 'main' && 'prod' || github.ref_name == 'stage' && 'test' || 'dev' }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          ref: ${{ github.ref }}
      - name: 'migrate db'
        uses: ./.github/actions/migrate-db
        with:
          environment: ${{ github.ref_name == 'main' && 'prod' || github.ref_name == 'stage' && 'test' || 'dev' }}
          openshift-server: ${{ secrets.OPENSHIFT_SERVER }}
          api-token: ${{ secrets.OPENSHIFT_API_TOKEN }}
      - name: Create Version Changeset
        run: npm install @changesets/cli && npx changeset version
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Commit Version
        if: ${{ github.ref_name == 'stage' }}
        uses: stefanzweifel/git-auto-commit-action@v4
        with:
          commit_message: 'Update version [skip ci]'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  deploy:
    name: Deploy
    needs: metadata
    if: ${{inputs.changed_apps != '[]' && inputs.changed_apps != ''}}
    runs-on: ubuntu-20.04
    environment:
      name: ${{ github.ref_name == 'main' && 'prod' || github.ref_name == 'stage' && 'test' || 'dev' }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          ref: ${{ github.ref_name }}
      - name: Trigger Deployments
        uses: ./.github/actions/trigger-deploy
        with:
          openshift-server: ${{ secrets.OPENSHIFT_SERVER }}
          api-token: ${{ secrets.OPENSHIFT_API_TOKEN }}
          project: ${{ inputs.changed_apps }}
          environment: ${{ github.ref_name == 'main' && 'prod' || github.ref_name == 'stage' && 'test' || 'dev' }}

  # trigger-e2e:
  #   name: Trigger E2E Tests
  #   needs: [metadata, deploy]
  #   runs-on: ubuntu-20.04
  #   if: |
  #     always() &&
  #     (github.ref_name == 'stage') &&
  #     (needs.deploy.result == 'success' || needs.deploy.result == 'skipped')
  #   steps:
  #     - name: Trigger E2E Tests
  #       uses: actions/github-script@v6
  #       with:
  #         script: |
  #           try {
  #             console.log('Attempting to trigger E2E tests');
  #             await github.rest.actions.createWorkflowDispatch({
  #               owner: context.repo.owner,
  #               repo: context.repo.repo,
  #               workflow_id: 'e2e.yml',
  #               ref: '${{ github.ref }}',
  #               inputs: {
  #                 sha: '${{ inputs.sha }}',
  #                 changed_apps: '${{ inputs.changed_apps }}',
  #                 cluster_name: 'api-postgres-clone'
  #               }
  #             });
  #             console.log('E2E tests triggered successfully');
  #           } catch (error) {
  #             console.log('Error triggering E2E tests:', error);
  #             throw error;
  #           }
