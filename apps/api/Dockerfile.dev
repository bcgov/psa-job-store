# Use the official Node.js 18 image.
FROM node:22.11.0-alpine AS base

# Create and change to the app directory.
FROM base AS builder
WORKDIR /tmp/build
ARG POSTGRES_DB
ARG POSTGRES_USER
ARG POSTGRES_PASSWORD
ARG DATABASE_URL
ARG SSO_ENVIRONMENT
ARG SSO_INTEGRATION_ID
ARG CSS_API_CLIENT_ID
ARG CSS_API_CLIENT_SECRET
ARG SESSION_SECRET
ARG KEYCLOAK_REALM_URL
ARG KEYCLOAK_CALLBACK_URL
ARG KEYCLOAK_LOGOUT_REDIRECT_URL
ARG KEYCLOAK_CLIENT_ID
ARG KEYCLOAK_CLIENT_SECRET

RUN pwd
RUN test -n "$POSTGRES_DB"
RUN test -n "$POSTGRES_USER"
RUN test -n "$POSTGRES_PASSWORD"
RUN test -n "$DATABASE_URL"
RUN test -n "$SSO_ENVIRONMENT"
RUN test -n "$SSO_INTEGRATION_ID"
RUN test -n "$CSS_API_CLIENT_ID"
RUN test -n "$CSS_API_CLIENT_SECRET"
RUN test -n "$SESSION_SECRET"
RUN test -n "$KEYCLOAK_REALM_URL"
RUN test -n "$KEYCLOAK_CALLBACK_URL"
RUN test -n "$KEYCLOAK_LOGOUT_REDIRECT_URL"
RUN test -n "$KEYCLOAK_CLIENT_ID"
RUN test -n "$KEYCLOAK_CLIENT_SECRET"

# Copy application dependency manifests to the container image.
COPY package*.json ./

# Install dependencies.
COPY package*.json ./
COPY packages ./packages
COPY apps/api/package.json ./apps/api/
RUN npm ci
COPY tsconfig.json ./
COPY packages/tsconfig ./tsconfig/
COPY apps/api ./apps/api
#generates the dist folder for nest to run
# RUN npm -w api run build

FROM base AS runner
ARG POSTGRES_DB
ARG POSTGRES_USER
ARG POSTGRES_PASSWORD
ARG DATABASE_URL
ARG SSO_ENVIRONMENT
ARG SSO_INTEGRATION_ID
ARG CSS_API_CLIENT_ID
ARG CSS_API_CLIENT_SECRETSSO_ENVIRONMENT
ARG SESSION_SECRET
ARG KEYCLOAK_REALM_URL
ARG KEYCLOAK_CALLBACK_URL
ARG KEYCLOAK_LOGOUT_REDIRECT_URL
ARG KEYCLOAK_CLIENT_ID
ARG KEYCLOAK_CLIENT_SECRET

ENV POSTGRES_DB $POSTGRES_DB
ENV POSTGRES_USER $POSTGRES_USER
ENV POSTGRES_PASSWORD $POSTGRES_PASSWORD
ENV DATABASE_URL $DATABASE_URL
ARG SSO_ENVIRONMENT $SSO_ENVIRONMENT
ARG SSO_INTEGRATION_ID $SSO_INTEGRATION_ID
ARG CSS_API_CLIENT_ID $CSS_API_CLIENT_ID
ARG CSS_API_CLIENT_SECRET $CSS_API_CLIENT_SECRET
ENV SESSION_SECRET $SESSION_SECRET
ENV KEYCLOAK_REALM_URL $KEYCLOAK_REALM_URL
ENV KEYCLOAK_CALLBACK_URL $KEYCLOAK_CALLBACK_URL
ENV KEYCLOAK_LOGOUT_REDIRECT_URL $KEYCLOAK_LOGOUT_REDIRECT_URL
ENV KEYCLOAK_CLIENT_ID $KEYCLOAK_CLIENT_ID
ENV KEYCLOAK_CLIENT_SECRET $KEYCLOAK_CLIENT_SECRET
ENV NODE_ENV "development"

WORKDIR /usr/src
COPY --from=builder /tmp/build ./
COPY /apps/api/prisma ./apps/api/prisma
COPY /apps/api/package*.json ./apps/api/

WORKDIR /usr/src/apps/api/
# generates the prisma client
RUN npx prisma generate
# build common-kit
RUN npm -w common-kit run build
#generates the dist folder for nest to run
#RUN npm run build

# openshift runs as a different user than what docker builds with
# this fixes the issue as related to the npm cache
#RUN mkdir /.npm
#RUN chgrp -R 0 /.npm && chmod -R g=u /.npm

#For debugging: create and write the contents of start.sh in the container

RUN echo "#!/bin/sh" >> start.sh && \
    echo "sleep 10" >> start.sh && \
    echo "# push the schema to the database and sync the client" >> start.sh && \
    echo "npx prisma migrate deploy dev" >> start.sh && \
    echo "" >> start.sh && \
    echo "# Start the application" >> start.sh && \
    echo "npm run start:dev" >> start.sh

# Set execute permissions for the start.sh script.
RUN chmod +x ./start.sh

# Expose port 4000
EXPOSE 4000

# Start the application
CMD ["./start.sh"]