// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

generator nestgraphql {
  provider             = "prisma-nestjs-graphql"
  output               = "../src/@generated/prisma-nestjs-graphql"
  combineScalarFilters = true
  noAtomicOperations   = true
  noTypeId             = true
  omitModelsCount      = true
  purgeOutput          = true
  reExport             = Single

  decorate_1_type      = "FindMany*Args"
  decorate_1_field     = "@(cursor|distinct)"
  decorate_1_name      = "HideField"
  decorate_1_from      = "@nestjs/graphql"
  decorate_1_arguments = "[]"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum PositionRequestStatus {
  DRAFT
  IN_REVIEW
  COMPLETED
  ESCALATED
  ACTION_REQUIRED
}

model PositionRequest {
  id                       Int                    @id @default(autoincrement())
  step                     Int
  reports_to_position_id   String
  department_id            String
  parent_job_profile_id    Int?
  profile_json             Json?                  @db.JsonB
  orgchart_json            Json?                  @db.JsonB
  user_id                  String?                @db.Uuid
  classificationAssignedTo String?                @db.Uuid // to whom this position request was assigned to in the CRM - will filter by this field when classificaton user sees their tasks
  title                    String?
  position_number          Int?
  classification_id        String?
  classification_code      String? // this is just to satisfy type definition, no data is stored here AL-146
  user_name                String? // this is just to satisfy type definition, no data is stored here AL-146
  email                    String? // this is just to satisfy type definition, no data is stored here AL-146
  submission_id            String?
  submitted_at             DateTime?
  approved_at              DateTime?
  status                   PositionRequestStatus?
  updated_at               DateTime               @default(now()) @updatedAt

  // TODO: AL-146
  // user        User       @relation(fields: [user_id], references: [id])
  // classification     Classification @relation(fields: [classification_id], references: [id])
  parent_job_profile JobProfile? @relation(fields: [parent_job_profile_id], references: [id])
  department         Department  @relation(fields: [department_id], references: [id])

  @@map("position_request")
}

model User {
  id         String    @id @default(uuid()) @db.Uuid
  name       String?
  email      String?   @unique
  username   String?   @unique
  roles      String[]
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now()) @updatedAt
  deleted_at DateTime?

  comments Comment[]

  // TODO: AL-146
  // PositionRequest PositionRequest[]
  JobProfile JobProfile[]

  @@map("user")
}

// **************************
// Behavioural Competencies
// **************************

enum BehaviouralCompetencyType {
  EXCLUDED
  INCLUDED
  INDIGENOUS

  @@map("behavioural_competency_type")
}

enum BehaviouralCompetencyCategory {
  ACHIEVING_BUSINESS_RESULTS
  INTERPERSONAL_RELATIONSHIPS
  LEADING_PEOPLE
  PERSONAL_EFFECTIVENESS

  @@map("behavioural_competency_category")
}

model BehaviouralCompetency {
  id           Int                               @id @default(autoincrement())
  type         BehaviouralCompetencyType
  category     BehaviouralCompetencyCategory
  name         String
  description  String
  job_profiles JobProfileBehaviouralCompetency[]

  @@map("behavioural_competency")
}

enum JobProfileState {
  DRAFT
  PUBLISHED
}

enum JobProfileType {
  CORPORATE
  MINISTRY
  USER

  @@map("job_profile_type")
}

model JobProfile {
  id                       Int                               @id @default(autoincrement())
  behavioural_competencies JobProfileBehaviouralCompetency[]
  classifications          JobProfileClassification[]
  organizations            JobProfileOrganization[]
  career_group             JobProfileCareerGroup?            @relation(fields: [career_group_id], references: [id])
  career_group_id          Int
  context                  JobProfileContext?
  job_family               JobProfileJobFamily?              @relation(fields: [job_family_id], references: [id])
  job_family_id            Int
  role                     JobProfileRole?                   @relation(fields: [role_id], references: [id])
  role_id                  Int
  role_type                JobProfileRoleType?               @relation(fields: [role_type_id], references: [id])
  role_type_id             Int?
  scope                    JobProfileScope?                  @relation(fields: [scope_id], references: [id])
  scope_id                 Int?
  state                    JobProfileState                   @default(DRAFT)
  stream                   JobProfileStream?                 @relation(fields: [stream_id], references: [id])
  stream_id                Int
  type                     JobProfileType
  updated_at               DateTime?                         @default(now()) @updatedAt
  owner_id                 String?                           @db.Uuid
  owner                    User?                             @relation(fields: [owner_id], references: [id])

  title            String
  number           Int                   @unique
  overview         String
  accountabilities Json                  @default("{\"optional\": [], \"required\": []}") @db.JsonB
  requirements     String[]
  reports_to       JobProfileReportsTo[]
  position_request PositionRequest[]

  @@map("job_profile")
}

model JobProfileBehaviouralCompetency {
  behavioural_competency    BehaviouralCompetency @relation(fields: [behavioural_competency_id], references: [id])
  behavioural_competency_id Int
  job_profile               JobProfile            @relation(fields: [job_profile_id], references: [id])
  job_profile_id            Int

  @@id([behavioural_competency_id, job_profile_id])
  @@map("job_profile_behavioural_competency")
}

model JobProfileCareerGroup {
  id           Int          @id @default(autoincrement())
  name         String
  job_profiles JobProfile[]

  @@map("job_profile_career_group")
}

model JobProfileClassification {
  classification    Classification @relation(fields: [classification_id], references: [id])
  classification_id String
  job_profile       JobProfile     @relation(fields: [job_profile_id], references: [id])
  job_profile_id    Int

  @@id([classification_id, job_profile_id])
  @@map("job_profile_classification")
}

model JobProfileMinimumRequirements {
  id          Int    @id @default(autoincrement())
  requirement String
  grade       String

  @@map("job_profile_minimum_requirements")
}

model JobProfileOrganization {
  organization    Organization @relation(fields: [organization_id], references: [id])
  organization_id String
  job_profile     JobProfile   @relation(fields: [job_profile_id], references: [id])
  job_profile_id  Int

  @@id([organization_id, job_profile_id])
  @@map("job_profile_organization")
}

model JobProfileContext {
  id             Int        @id @default(autoincrement())
  job_profile    JobProfile @relation(fields: [job_profile_id], references: [id])
  job_profile_id Int        @unique

  description String

  @@map("job_profile_context")
}

model JobProfileJobFamily {
  id               Int                @id @default(autoincrement())
  name             String
  job_profiles     JobProfile[]
  JobProfileStream JobProfileStream[]

  @@map("job_profile_job_family")
}

model JobProfileReportsTo {
  classification    Classification @relation(fields: [classification_id], references: [id])
  classification_id String
  job_profile       JobProfile     @relation(fields: [job_profile_id], references: [id])
  job_profile_id    Int

  @@id([classification_id, job_profile_id])
  @@map("job_profile_reports_to")
}

model JobProfileScope {
  id          Int    @id @default(autoincrement())
  name        String
  description String

  job_profiles JobProfile[]

  @@map("job_profile_scope")
}

model JobProfileRole {
  id   Int    @id @default(autoincrement())
  name String

  job_profiles JobProfile[]

  @@map("job_profile_role")
}

model JobProfileRoleType {
  id   Int    @id @default(autoincrement())
  name String

  job_profiles JobProfile[]

  @@map("job_profile_role_type")
}

model JobProfileStream {
  id            Int                 @id @default(autoincrement())
  job_family    JobProfileJobFamily @relation(fields: [job_family_id], references: [id])
  job_family_id Int
  name          String
  job_profiles  JobProfile[]

  @@map("job_profile_stream")
}

model JobProfileHistory {
  id             Int       @id @default(autoincrement())
  job_profile_id Int
  json           Json      @db.JsonB
  created_at     DateTime  @default(now())
  created_by     Int
  updated_at     DateTime  @default(now())
  updated_by     Int
  deleted_at     DateTime?
  deleted_by     Int

  @@map("job_profile_history")
}

model Comment {
  id          Int    @id @default(autoincrement())
  author_id   String @db.Uuid
  record_id   Int
  record_type String
  text        String

  created_at DateTime  @default(now())
  updated_at DateTime  @default(now()) @updatedAt
  deleted_at DateTime?

  author User @relation(fields: [author_id], references: [id])

  @@map("comment")
}

model EmployeeGroup {
  id   String @id
  name String

  classifications Classification[]

  @@map("employee_group")
}

// PeopleSoft Tables
model Classification {
  id                String   @id // JOBCODE
  peoplesoft_id     String // SETID
  code              String // DESCRSHORT
  name              String // DESCR
  employee_group_id String // SAL_ADMIN_PLAN
  grade             String // GRADE
  effective_status  String // EFF_STATUS
  effective_date    DateTime @db.Date // EFFDT

  employee_group EmployeeGroup              @relation(fields: [employee_group_id], references: [id])
  job_profiles   JobProfileClassification[]
  reportees      JobProfileReportsTo[]

  @@map("classification")
}

model Department {
  id               String            @id // DEPTID
  location         Location          @relation(fields: [location_id], references: [id])
  location_id      String
  organization     Organization      @relation(fields: [organization_id], references: [id])
  organization_id  String
  peoplesoft_id    String // SETID
  code             String // DESCRSHORT
  name             String // DESCR
  effective_status String // EFF_STATUS
  effective_date   DateTime          @db.Date // EFFDT
  PositionRequest  PositionRequest[]

  @@map("department")
}

model Location {
  id               String   @id // LOCATION
  peoplesoft_id    String // SETID
  code             String // DESCRSHORT
  name             String // DESCR
  effective_status String // EFF_STATUS
  effective_date   DateTime @db.Date // EFFDT

  departments Department[]

  @@map("location")
}

model Organization {
  id               String   @id // BUSINESS_UNIT
  peoplesoft_id    String   @unique // SETID
  code             String // DESCRSHORT
  name             String // DESCR
  effective_status String // EFF_STATUS
  effective_date   DateTime @db.Date // EFFDT

  departments            Department[]
  JobProfileOrganization JobProfileOrganization[]

  @@map("organization")
}
