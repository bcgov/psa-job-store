// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

generator nestgraphql {
  provider             = "prisma-nestjs-graphql"
  output               = "../src/@generated/prisma-nestjs-graphql"
  combineScalarFilters = true
  noAtomicOperations   = true
  noTypeId             = true
  omitModelsCount      = true
  purgeOutput          = true
  reExport             = Single

  decorate_1_type      = "FindMany*Args"
  decorate_1_field     = "@(cursor|distinct)"
  decorate_1_name      = "HideField"
  decorate_1_from      = "@nestjs/graphql"
  decorate_1_arguments = "[]"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model ScheduledTaskMetadata {
  task        String    @id
  frequency   Int? // How often the task should run (in seconds)
  last_run_at DateTime?

  @@map("scheduled_task_metadata")
}

enum PositionRequestStatus {
  DRAFT
  VERIFICATION
  COMPLETED
  REVIEW
  ACTION_REQUIRED
  CANCELLED
}

model PositionRequest {
  id                               Int                    @id @default(autoincrement())
  crm_id                           Int?                   @unique
  crm_assigned_to_account_id       Int? // CRM account id of the classifications user who is assigned to the incident
  crm_lookup_name                  String? // Keeps track of the current step in the wizard
  step                             Int // Keeps track of the current step in the wizard
  max_step_completed               Int? // Keeps track of the highest step completed in the wizard
  reports_to_position_id           String
  department_id                    String // this is department id that user selected in org chart
  parent_job_profile_id            Int?
  crm_json                         Json?                  @db.JsonB
  profile_json                     Json?                  @db.JsonB
  orgchart_json                    Json?                  @db.JsonB
  user_id                          String?                @db.Uuid
  title                            String?
  position_number                  Int?
  classification_id                String?
  classification_employee_group_id String?
  classification_peoplesoft_id     String?
  classification_code              String? // this is just to satisfy type definition, no data is stored here AL-146
  user_name                        String? // this is just to satisfy type definition, no data is stored here AL-146
  email                            String? // this is just to satisfy type definition, no data is stored here AL-146
  submission_id                    String?
  submitted_at                     DateTime               @default(now())
  approved_at                      DateTime               @default(now())
  status                           PositionRequestStatus?
  updated_at                       DateTime               @default(now()) @updatedAt
  shareUUID                        String?                @default(uuid()) @db.Uuid

  // additional information form data
  // additional_info_work_location_id             String?
  // additional_info_department_id                String? // this is department id collected from the additional information form
  // additional_info_excluded_mgr_position_number String?
  // additional_info_comments                     String?
  additional_info Json? @db.JsonB

  // TODO: AL-146
  // user        User       @relation(fields: [user_id], references: [id])
  // classification     Classification @relation(fields: [classification_id], references: [id])
  parent_job_profile JobProfile? @relation(fields: [parent_job_profile_id], references: [id])
  department         Department  @relation(fields: [department_id], references: [id])

  @@map("position_request")
}

model User {
  id         String    @id @default(uuid()) @db.Uuid
  name       String?
  email      String?   @unique
  username   String?   @unique
  roles      String[]
  metadata   Json?     @db.JsonB
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now()) @updatedAt
  deleted_at DateTime?

  comments Comment[]

  // TODO: AL-146
  // PositionRequest PositionRequest[]
  JobProfile           JobProfile[]
  SavedJobProfile      SavedJobProfile[]
  draftedJobProfiles   JobProfile[]      @relation(name: "updatedByRelation")
  publishedJobProfiles JobProfile[]      @relation(name: "PublishedByRelation")

  @@map("user")
}

// **************************
// Behavioural Competencies
// **************************

enum BehaviouralCompetencyType {
  EXCLUDED
  INCLUDED
  INDIGENOUS

  @@map("behavioural_competency_type")
}

enum BehaviouralCompetencyCategory {
  ACHIEVING_BUSINESS_RESULTS
  INTERPERSONAL_RELATIONSHIPS
  LEADING_PEOPLE
  PERSONAL_EFFECTIVENESS

  @@map("behavioural_competency_category")
}

model BehaviouralCompetency {
  id           Int                               @id @default(autoincrement())
  type         BehaviouralCompetencyType
  category     BehaviouralCompetencyCategory
  name         String
  description  String
  job_profiles JobProfileBehaviouralCompetency[]

  @@map("behavioural_competency")
}

enum JobProfileState {
  DRAFT
  PUBLISHED
  UNPUBLISHED
}

enum JobProfileType {
  CORPORATE
  MINISTRY

  @@map("job_profile_type")
}

model JobProfile {
  id                       Int                               @id @default(autoincrement())
  behavioural_competencies JobProfileBehaviouralCompetency[]
  classifications          JobProfileClassification[]
  organizations            JobProfileOrganization[]
  all_organizations        Boolean                           @default(true)
  all_reports_to           Boolean                           @default(false)

  context         JobProfileContext?
  role            JobProfileRole?       @relation(fields: [role_id], references: [id])
  role_id         Int?
  role_type       JobProfileRoleType?   @relation(fields: [role_type_id], references: [id])
  role_type_id    Int?
  scopes          JobProfileScopeLink[]
  state           JobProfileState       @default(DRAFT)
  type            JobProfileType
  created_at      DateTime?             @default(now())
  updated_at      DateTime?             @default(now()) @updatedAt
  published_at    DateTime?
  owner_id        String?               @db.Uuid
  owner           User?                 @relation(fields: [owner_id], references: [id]) //  @relation(name: "OwnerRelation", fields: [owner_id], references: [id])
  updated_by_id   String?               @db.Uuid
  updated_by      User?                 @relation(name: "updatedByRelation", fields: [updated_by_id], references: [id])
  published_by_id String?               @db.Uuid
  published_by    User?                 @relation(name: "PublishedByRelation", fields: [published_by_id], references: [id])

  jobFamilies      JobProfileJobFamilyLink[]
  streams          JobProfileStreamLink[]
  program_overview String?
  review_required  Boolean?                  @default(false)

  title                                  String
  number                                 Int                   @unique
  overview                               String
  accountabilities                       Json?                 @db.JsonB
  education                              Json?                 @db.JsonB
  job_experience                         Json?                 @db.JsonB
  professional_registration_requirements Json?                 @db.JsonB
  preferences                            Json?                 @db.JsonB
  knowledge_skills_abilities             Json?                 @db.JsonB
  willingness_statements                 Json?                 @db.JsonB
  optional_requirements                  String[]
  security_screenings                    Json?                 @db.JsonB
  reports_to                             JobProfileReportsTo[]
  position_request                       PositionRequest[]
  total_comp_create_form_misc            Json? // stores e.x. state of checkbox for markAllNonEditable for accountabilities

  is_archived     Boolean           @default(false) // When total comp puts profile to draft, then deletes it AND it's linked to PositionRequests
  SavedJobProfile SavedJobProfile[]

  @@map("job_profile")
}

model SavedJobProfile {
  user         User       @relation(fields: [userId], references: [id])
  userId       String     @db.Uuid
  jobProfile   JobProfile @relation(fields: [jobProfileId], references: [id])
  jobProfileId Int
  createdAt    DateTime   @default(now())

  @@id([userId, jobProfileId])
  @@map("saved_job_profile")
}

model JobProfileScopeLink {
  id             Int             @id @default(autoincrement())
  job_profile    JobProfile      @relation(fields: [job_profile_id], references: [id])
  job_profile_id Int
  scope          JobProfileScope @relation(fields: [scope_id], references: [id])
  scope_id       Int

  @@map("job_profile_scope_link")
}

model JobProfileJobFamilyLink {
  jobProfileId Int
  jobFamilyId  Int
  jobProfile   JobProfile          @relation(fields: [jobProfileId], references: [id])
  jobFamily    JobProfileJobFamily @relation(fields: [jobFamilyId], references: [id])

  @@id([jobProfileId, jobFamilyId])
  @@map("job_profile_job_family_link")
}

model JobProfileStreamLink {
  jobProfileId Int
  streamId     Int
  jobProfile   JobProfile       @relation(fields: [jobProfileId], references: [id])
  stream       JobProfileStream @relation(fields: [streamId], references: [id])

  @@id([jobProfileId, streamId])
  @@map("job_profile_stream_link")
}

model JobProfileBehaviouralCompetency {
  behavioural_competency    BehaviouralCompetency @relation(fields: [behavioural_competency_id], references: [id])
  behavioural_competency_id Int
  job_profile               JobProfile            @relation(fields: [job_profile_id], references: [id])
  job_profile_id            Int

  @@id([behavioural_competency_id, job_profile_id])
  @@map("job_profile_behavioural_competency")
}

model JobProfileClassification {
  job_profile                      JobProfile     @relation(fields: [job_profile_id], references: [id])
  job_profile_id                   Int
  classification                   Classification @relation(fields: [classification_id, classification_employee_group_id, classification_peoplesoft_id], references: [id, employee_group_id, peoplesoft_id])
  classification_id                String
  classification_employee_group_id String         @default("-1")
  classification_peoplesoft_id     String         @default("-1")

  @@id([job_profile_id, classification_id, classification_employee_group_id, classification_peoplesoft_id])
  @@map("job_profile_classification")
}

model JobProfileMinimumRequirements {
  id          Int    @id @default(autoincrement())
  requirement String
  grade       String

  @@map("job_profile_minimum_requirements")
}

model ProfessionalRegistrationRequirementBase {
  id            Int                                   @id @default(autoincrement())
  text          String                                @unique
  registrations ProfessionalRegistrationRequirement[]

  @@map("professional_registration_requirement_base")
}

model ProfessionalRegistrationRequirement {
  id                               Int                                     @id @default(autoincrement())
  requirement                      ProfessionalRegistrationRequirementBase @relation(fields: [requirement_id], references: [id])
  requirement_id                   Int
  classification_id                String?
  classification_employee_group_id String?
  job_family                       JobProfileJobFamily?                    @relation(fields: [job_family_id], references: [id])
  job_family_id                    Int?

  organization    Organization? @relation(fields: [organization_id], references: [id])
  organization_id String?

  @@unique([requirement_id, classification_id, classification_employee_group_id, job_family_id, organization_id])
  @@map("professional_registration_requirement")
}

model SecurityScreeningBase {
  id         Int                 @id @default(autoincrement())
  text       String              @unique
  screenings SecurityScreening[]

  @@map("security_screenings_base")
}

model SecurityScreening {
  id            Int                   @id @default(autoincrement())
  screening     SecurityScreeningBase @relation(fields: [screening_id], references: [id])
  screening_id  Int
  job_family    JobProfileJobFamily?  @relation(fields: [job_family_id], references: [id])
  job_family_id Int?

  organization    Organization? @relation(fields: [organization_id], references: [id])
  organization_id String?

  @@unique([screening_id, job_family_id, organization_id])
  @@map("security_screening")
}

model JobProfileOrganization {
  organization    Organization @relation(fields: [organization_id], references: [id])
  organization_id String
  job_profile     JobProfile   @relation(fields: [job_profile_id], references: [id])
  job_profile_id  Int

  @@id([organization_id, job_profile_id])
  @@map("job_profile_organization")
}

model JobProfileContext {
  id             Int        @id @default(autoincrement())
  job_profile    JobProfile @relation(fields: [job_profile_id], references: [id])
  job_profile_id Int        @unique

  description String

  @@map("job_profile_context")
}

model JobProfileJobFamily {
  id                                  Int                                   @id @default(autoincrement())
  name                                String
  // job_profiles     JobProfile[]
  jobProfiles                         JobProfileJobFamilyLink[]
  JobProfileStream                    JobProfileStream[]
  ProfessionalRegistrationRequirement ProfessionalRegistrationRequirement[]
  SecurityScreening                   SecurityScreening[]

  @@map("job_profile_job_family")
}

model JobProfileReportsTo {
  job_profile                      JobProfile     @relation(fields: [job_profile_id], references: [id])
  job_profile_id                   Int
  classification                   Classification @relation(fields: [classification_id, classification_employee_group_id, classification_peoplesoft_id], references: [id, employee_group_id, peoplesoft_id])
  classification_id                String
  classification_employee_group_id String         @default("-1")
  classification_peoplesoft_id     String         @default("-1")

  @@id([job_profile_id, classification_id, classification_employee_group_id, classification_peoplesoft_id])
  @@map("job_profile_reports_to")
}

model JobProfileScope {
  id          Int    @id @default(autoincrement())
  name        String
  description String

  JobProfileScopeLink JobProfileScopeLink[]

  @@map("job_profile_scope")
}

model JobProfileRole {
  id   Int    @id @default(autoincrement())
  name String

  job_profiles JobProfile[]

  @@map("job_profile_role")
}

model JobProfileRoleType {
  id   Int    @id @default(autoincrement())
  name String

  job_profiles JobProfile[]

  @@map("job_profile_role_type")
}

model JobProfileStream {
  id            Int                    @id @default(autoincrement())
  job_family    JobProfileJobFamily    @relation(fields: [job_family_id], references: [id])
  job_family_id Int
  name          String
  jobProfiles   JobProfileStreamLink[]
  // job_profiles  JobProfile[]

  @@map("job_profile_stream")
}

model Comment {
  id          Int    @id @default(autoincrement())
  author_id   String @db.Uuid
  record_id   Int
  record_type String
  text        String

  created_at DateTime  @default(now())
  updated_at DateTime  @default(now()) @updatedAt
  deleted_at DateTime?

  author User @relation(fields: [author_id], references: [id])

  @@map("comment")
}

model EmployeeGroup {
  id   String @id
  name String

  classifications Classification[]

  @@map("employee_group")
}

// PeopleSoft Tables
model Classification {
  id                String // JOBCODE
  employee_group_id String // SAL_ADMIN_PLAN
  peoplesoft_id     String // SETID
  code              String // DESCRSHORT
  name              String // DESCR
  grade             String // GRADE
  effective_status  String // EFF_STATUS
  effective_date    DateTime @db.Date // EFFDT

  employee_group EmployeeGroup              @relation(fields: [employee_group_id], references: [id])
  job_profiles   JobProfileClassification[]
  reportees      JobProfileReportsTo[]

  @@id([id, employee_group_id, peoplesoft_id])
  @@map("classification")
}

model Department {
  id               String       @id // DEPTID
  location         Location     @relation(fields: [location_id], references: [id])
  location_id      String
  organization     Organization @relation(fields: [organization_id], references: [id])
  organization_id  String
  peoplesoft_id    String // SETID
  code             String // DESCRSHORT
  name             String // DESCR
  effective_status String // EFF_STATUS
  effective_date   DateTime     @db.Date // EFFDT

  PositionRequest PositionRequest[]

  @@map("department")
}

model Location {
  id               String   @id // LOCATION
  peoplesoft_id    String // SETID
  code             String // DESCRSHORT
  name             String // DESCR
  effective_status String // EFF_STATUS
  effective_date   DateTime @db.Date // EFFDT

  departments Department[]

  @@map("location")
}

model Organization {
  id               String   @id // BUSINESS_UNIT
  peoplesoft_id    String   @unique // SETID
  code             String // DESCRSHORT
  name             String // DESCR
  effective_status String // EFF_STATUS
  effective_date   DateTime @db.Date // EFFDT

  departments                         Department[]
  JobProfileOrganization              JobProfileOrganization[]
  ProfessionalRegistrationRequirement ProfessionalRegistrationRequirement[]
  SecurityScreening                   SecurityScreening[]

  @@map("organization")
}
