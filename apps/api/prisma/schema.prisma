// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

generator nestgraphql {
  provider             = "prisma-nestjs-graphql"
  output               = "../src/@generated/prisma-nestjs-graphql"
  combineScalarFilters = true
  noAtomicOperations   = true
  noTypeId             = true
  omitModelsCount      = true
  purgeOutput          = true
  reExport             = Single

  decorate_1_type      = "FindMany*Args"
  decorate_1_field     = "@(cursor|distinct)"
  decorate_1_name      = "HideField"
  decorate_1_from      = "@nestjs/graphql"
  decorate_1_arguments = "[]"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         String    @id @default(uuid()) @db.Uuid
  name       String?
  email      String?   @unique
  roles      String[]
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now()) @updatedAt
  deleted_at DateTime?

  comments   Comment[]
  identities Identity[]
  JobProfile JobProfile[]

  @@map("user")
}

model Identity {
  sub               String
  identity_provider String
  user_id           String    @db.Uuid
  user              User      @relation(fields: [user_id], references: [id])
  created_at        DateTime  @default(now())
  updated_at        DateTime  @default(now()) @updatedAt
  deleted_at        DateTime?

  @@id([sub, identity_provider])
  @@map("identity")
}

model BehaviouralCompetency {
  id          Int    @id @default(autoincrement())
  name        String
  description String

  job_profiles JobProfileBehaviouralCompetency[]

  @@map("behavioural_competency")
}

model Ministry {
  id   Int    @id @default(autoincrement())
  code String
  name String

  job_profiles JobProfile[]

  @@map("ministry")
}

model Classification {
  id                  Int @id @default(autoincrement())
  grid_id             Int
  occupation_group_id Int

  grid                   Grid                  @relation(fields: [grid_id], references: [id])
  occupation_group       OccupationGroup       @relation(fields: [occupation_group_id], references: [id])
  job_profiles           JobProfile[]
  dependent_job_profiles JobProfileReportsTo[]

  @@map("classification")
}

model Grid {
  id              Int              @id @default(autoincrement())
  name            String
  steps           Int[]
  classifications Classification[]

  @@map("grid")
}

model OccupationGroup {
  id   Int    @id @default(autoincrement())
  code String
  name String

  classifications Classification[]

  @@map("occupation_group")
}

model JobCategory {
  id   Int    @id @default(autoincrement())
  name String

  profiles JobProfile[]

  @@map("job_category")
}

model JobFamily {
  id   Int    @id @default(autoincrement())
  name String

  profiles JobProfile[]

  @@map("job_family")
}

model JobRole {
  id   Int    @id @default(autoincrement())
  name String

  profiles JobProfile[]

  @@map("job_role")
}

enum JobProfileState {
  SUBMITTED
  APPROVED
  REJECTED
}

enum JobStream {
  CORPORATE
  MINISTRY
  USER
}

model JobProfile {
  id                Int     @id @default(autoincrement())
  category_id       Int?
  classification_id Int
  family_id         Int?
  ministry_id       Int?
  owner_id          String? @db.Uuid
  parent_id         Int?
  role_id           Int?

  state                    JobProfileState
  stream                   JobStream
  title                    String
  number                   Int?
  context                  String
  overview                 String
  accountabilities         Json                              @default("{\"optional\": [], \"required\": []}") @db.JsonB
  requirements             String[]
  behavioural_competencies JobProfileBehaviouralCompetency[]
  reports_to               JobProfileReportsTo[]

  category       JobCategory?   @relation(fields: [category_id], references: [id])
  children       JobProfile[]   @relation("JobProfileParentChild")
  classification Classification @relation(fields: [classification_id], references: [id])
  family         JobFamily?     @relation(fields: [family_id], references: [id])
  ministry       Ministry?      @relation(fields: [ministry_id], references: [id])
  owner          User?          @relation(fields: [owner_id], references: [id]) // Who created the job profile
  parent         JobProfile?    @relation("JobProfileParentChild", fields: [parent_id], references: [id])
  role           JobRole?       @relation(fields: [role_id], references: [id])

  @@map("job_profile")
}

model JobProfileBehaviouralCompetency {
  behavioural_competency_id Int
  job_profile_id            Int

  behavioural_competency BehaviouralCompetency @relation(fields: [behavioural_competency_id], references: [id])
  job_profile            JobProfile            @relation(fields: [job_profile_id], references: [id])

  @@id([behavioural_competency_id, job_profile_id])
  @@map("job_profile_behavioural_competency")
}

model JobProfileReportsTo {
  classification_id Int
  job_profile_id    Int

  classification Classification @relation(fields: [classification_id], references: [id])
  job_profile    JobProfile     @relation(fields: [job_profile_id], references: [id])

  @@id([classification_id, job_profile_id])
  @@map("job_profile_reports_to")
}

model JobProfileHistory {
  id             Int       @id @default(autoincrement())
  job_profile_id Int
  json           Json      @db.JsonB
  created_at     DateTime  @default(now())
  created_by     Int
  updated_at     DateTime  @default(now())
  updated_by     Int
  deleted_at     DateTime?
  deleted_by     Int

  @@map("job_profile_history")
}

model Comment {
  id          Int    @id @default(autoincrement())
  author_id   String @db.Uuid
  record_id   Int
  record_type String
  text        String

  created_at DateTime  @default(now())
  updated_at DateTime  @default(now()) @updatedAt
  deleted_at DateTime?

  author User @relation(fields: [author_id], references: [id])

  @@map("comment")
}
