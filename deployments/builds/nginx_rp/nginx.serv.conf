

server {
    listen 8081;
    server_name _;  # Default server name

    resolver 8.8.8.8 valid=30s;  # DNS resolver
    lua_ssl_verify_depth 2;
    lua_ssl_trusted_certificate /etc/ssl/cert.pem;
    error_log /dev/stderr debug;

    # lua_shared_dict discovery_cache 10m;  # Shared dictionary for caching

    location / {
        # Perform authentication check
        access_by_lua_block {
            local oidc = require("resty.openidc")
            -- Fetch environment variables
            local ENV = os.getenv("ENV") or "dev"  -- Default to "dev" if ENV is not set

            -- Base URL mapping for different environments
            local base_urls = {
                dev = "https://dev.loginproxy.gov.bc.ca",
                test = "https://test.loginproxy.gov.bc.ca",
                prod = "https://loginproxy.gov.bc.ca"
            }

            -- Get the base URL for the current environment
            local base_url = base_urls[ENV]

            -- Construct discovery endpoints dynamically
            local opts = {
                discovery = {
                    authorization_endpoint = base_url .. "/auth/realms/standard/protocol/openid-connect/auth",
                    token_endpoint = base_url .. "/auth/realms/standard/protocol/openid-connect/token",
                    userinfo_endpoint = base_url .. "/auth/realms/standard/protocol/openid-connect/userinfo",
                    jwks_uri = base_url .. "/auth/realms/standard/protocol/openid-connect/certs",
                    issuer = base_url .. "/auth/realms/standard"
                },
                client_id = os.getenv("CLIENT_ID"),
                client_secret = os.getenv("CLIENT_SECRET"),
                discovery_cache_ignore = true, -- Use the cache
                session_opts = {
                    name = "sess", -- Name of the session cookie
                    storage = "shm", -- Store session data in shared memory
                    shm_store = "discovery_cache", -- Name of the shared dictionary for caching
                    shm_set_tries = 3 -- Number of tries to set data in shared memory
                },
                redirect_uri = "/callback",
                keepalive = true,
                refresh_session_interval = 120,
                access_token_expires_in = 60,
                access_token_expires_leeway = 10,
                session_contents = {id_token=true},
                renew_access_token_on_expiry = true,
            }

            local res, err = oidc.authenticate(opts)
            if err then
                ngx.status = 403
                ngx.say("Access denied: ", err)
                ngx.exit(ngx.HTTP_FORBIDDEN)
            end
        }

        # Proxy pass to your application if authenticated
        proxy_pass http://kibana:5601;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }

    # Location for handling the OIDC redirect_uri
    location = /callback {
        access_by_lua_block {
            local oidc = require("resty.openidc")
            local ENV = os.getenv("ENV") or "dev"  -- Default to "dev" if ENV is not set
            -- Base URL mapping for different environments
            local base_urls = {
                dev = "https://dev.loginproxy.gov.bc.ca",
                test = "https://test.loginproxy.gov.bc.ca",
                prod = "https://loginproxy.gov.bc.ca"
            }

            -- Get the base URL for the current environment
            local base_url = base_urls[ENV]

            -- Construct discovery endpoints dynamically
            local opts = {
                discovery = {
                    authorization_endpoint = base_url .. "/auth/realms/standard/protocol/openid-connect/auth",
                    token_endpoint = base_url .. "/auth/realms/standard/protocol/openid-connect/token",
                    userinfo_endpoint = base_url .. "/auth/realms/standard/protocol/openid-connect/userinfo",
                    jwks_uri = base_url .. "/auth/realms/standard/protocol/openid-connect/certs",
                    issuer = base_url .. "/auth/realms/standard"
                },
                client_id = os.getenv("CLIENT_ID"),
                client_secret = os.getenv("CLIENT_SECRET"),
                redirect_uri = "/callback",
                keepalive = true,
                refresh_session_interval = 120,
                access_token_expires_in = 60,
                access_token_expires_leeway = 10,
                session_contents = {id_token=true},
                renew_access_token_on_expiry = true,
            }
            -- Perform the authentication and code exchange
            local res, err = oidc.authenticate(opts)
            if err then
                ngx.say("Authentication failed: ", err)
                ngx.exit(ngx.HTTP_UNAUTHORIZED)
            end

            -- Redirect back to the originally requested URL or a default one
            local target_url = ngx.var.cookie_OidcRedirectBack or "/"
            return ngx.redirect(target_url)
        }
        proxy_pass http://kibana:5601;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }
}