apiVersion: postgres-operator.crunchydata.com/v1beta1
kind: PostgresCluster
metadata:
  name: api-postgres-alpha
spec:
  shutdown: false
  instances:
    - replicas: 2
      resources:
        requests:
          cpu: '250m'
          memory: '256Mi'
        limits:
          cpu: '550m'
          memory: '512Mi'
      dataVolumeClaimSpec:
        accessModes:
          - 'ReadWriteOnce'
        resources:
          requests:
            storage: 1.5Gi # Adjust the storage size as per your requirement
      sidecars:
        replicaCertCopy:
          resources:
            requests:
              cpu: '5m'
              memory: '10Mi'
            limits:
              cpu: '10m'
              memory: '20Mi'
  backups:
    pgbackrest:
      global:
        repo1-retention-full: '30' # Retain backups for 30 days. All full and incremental after this will be removed.
        repo1-retention-full-type: time
      repos:
        - name: repo1
          schedules:
            full: '0 2 * * *'
            incremental: '*/60 * * * *'
          volume:
            volumeClaimSpec:
              storageClassName: netapp-file-backup
              accessModes:
                - 'ReadWriteOnce'
              resources:
                requests:
                  storage: 20Gi # Adjust as needed
      repoHost:
        resources:
          requests:
            cpu: 1m
            memory: 64Mi
          limits:
            cpu: 50m
            memory: 128Mi
      sidecars:
        pgbackrest:
          resources:
            requests:
              cpu: '50m'
              memory: '150Mi'
            limits:
              cpu: '100m'
              memory: '256Mi'
        pgbackrestConfig:
          resources:
            requests:
              cpu: '5m'
              memory: '10Mi'
            limits:
              cpu: '10m'
              memory: '20Mi'
  postgresVersion: 16
  # image: 'registry.redhat.io/rhel8/postgresql-15'  # Use Crunchy Data equivalent image
  patroni:
    dynamicConfiguration:
      postgresql:
        pg_hba: 'host all all 0.0.0.0/0 md5'
        parameters:
          effective_cache_size: 256MB #helps the PostgreSQL query planner guess how much memory is available for disk caching. For read-heavy workloads, setting this to a higher value (50-75% of total RAM) can be beneficial
          shared_buffers: 64MB # default is 128MB; a good tuned default for shared_buffers is 25% of the memory allocated to the pod
          wal_buffers: '3MB' # this can be set to -1 to automatically set as 1/32 of shared_buffers or 64kB, whichever is larger
          min_wal_size: 32MB
          max_wal_size: 64MB # default is 1GB
          max_slot_wal_keep_size: 128MB # default is -1, allowing unlimited wal growth when replicas fall behind
  # proxy:
  #   pgBouncer:
  #     replicas: 2
  #     requests:
  #       cpu: 1m
  #       memory: 64Mi
  #     limits:
  #       cpu: 10m
  #       memory: 128Mi
  primary:
    expose:
      service:
        type: ClusterIP
        ports:
          - name: postgresql
            port: 5432
            protocol: TCP
            targetPort: 5432
  users:
    - name: admin
      options: CREATEDB
      databases:
        - api
